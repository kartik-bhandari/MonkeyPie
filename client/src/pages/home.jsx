import React, {useState , useEffect} from 'react'
import Card from '../components/Card'
import Loader from '../components/Loader'
import FormField from '../components/FormField'
import Hero from '../components/hero'


const RenderCards = ({data ,title}) =>{
  if(data?.length > 0){
    return data.map((post) => <Card key={post._id} {...post}/>)
  }

  return(
    <h2 className='mt-5 font-bold text-[#6449ff] text-x1 upppercase'>
      {title}
    </h2>
  )
}

const Home = () => {
  const [loading,setLoading] = useState();
  const [allPosts,setAllPosts] = useState(null);
  const [searchText,setSearchText] = useState('');
  const [searchTimeout,setSearchTimeout] = useState(null);
  const [searchedResults, setSearchedResults] = useState(null);

  const fetchPosts = async()=>{
    setLoading(true);

    try{
      const response = await fetch('https://monkeypie.onrender.com/api/v1/post',{
        method:'GET',
        headers:{
          'Content-Type':'application/json',
        },
      })
      if(response.ok){
        const result = await response.json();
        setAllPosts(result.data.reverse());
      }
    }catch(error){
      alert(error)
    }
    finally{
      setLoading(false)
    }
  }


useEffect(() => {
  fetchPosts();
}, []);

const handleSearchChange = (e) =>{
  clearTimeout(searchTimeout);
  setSearchText(e.target.value);

  setSearchTimeout(
    setTimeout(() => {
      const searchResult = allPosts.filter((item) => item.name.toLowerCase().includes(searchText.toLowerCase()) || item.prompt.toLowerCase().includes(searchText.toLowerCase()));
      setSearchedResults(searchResult);
    }, 500),
  );
}
  
  return (
    <section>
      <Hero />
      <div className='mt-[-50px] max-w-7xl mx-auto p-8'>
      <div>
      <h1 className="font-extrabold text-black text-[35px]">
        The community showcase
      </h1>
      <p className='mt-2 text-[#666e75] text-[16px] max-w[500px]'>
        Browse through a collection of imaginative and visually stunning images generated by Dall-E AI
      </p>
      </div>

      <div className="mt-10">
        <FormField 
        type="text"
        name="text"
        placeholder="Search posts..."
        value={searchText}
        handleChange={handleSearchChange}
        />
      </div>

      <div className="mt-10">
        {loading ? (
          <div className='flex justify-center items-center'>
            <Loader/>
          </div>
        ) : (
          <>
            {
              searchText && (
                <h2 className='font-medium text-[#666e75] text-x1 mb-3'>
                  showing results for <span className='text-[#222328]'>{searchText}</span>
                </h2>
              )}
              <div className="grid lg:grid-col-4 sm:grid-cols-3 xs:grid-cols-2 grid-cols-1 gap-3 ">
                {searchText ?(
                <RenderCards 
                  data={searchedResults}
                  title="No search results found"
                />
                ):(
                  <RenderCards 
                  data={allPosts}
                  title="No posts found"
                />
                )}
              </div>
          </>
        )}
      </div>
      </div>
    
    </section>
  )
}

export default Home